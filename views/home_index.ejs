<div class="home-index-page">
  <section>
    <div class="home-index-header-row">
      <div class="home-index-header-text-row">
        <h2 class="home-index-header-text">Read vintage comics from the public domain.</h2>
      </div>
      <div class="home-index-search-row">
        <form class="form-group" action="/search" method="get">
          <input class="home-index-search-bar form-control" type="text" name="home-index-search-bar" placeholder="Search by title, tag, or issue number."/>
        </form>
      </div>
    </div>
  </section>
  <hr class="home-index-hr-tag-1">
  <section>
      <div class="home-index-carousel-row well">
          <div class="home-index-carousel-wrapper">
              <img src="images/carousel_1.jpg" class="home-index-carousel-image home-index-carousel-image-1">
              <img src="images/carousel_2.jpg" class="home-index-carousel-image home-index-carousel-image-2">
              <img src="images/carousel_3.jpg" class="home-index-carousel-image home-index-carousel-image-3">
              <img src="images/carousel_4.jpg" class="home-index-carousel-image home-index-carousel-image-4">
              <img src="images/carousel_5.jpg" class="home-index-carousel-image home-index-carousel-image-5">
          </div>
      </div>
  </section>
  <hr class="home-index-hr-tag-2">
  <section>
      <div class="home-index-comic-card-row-1">
          <div class="well">
              <p>comic card</p>
          </div>
      </div>
  </section>
  <hr class="home-index-hr-tag-3">
  <footer>
      <div class="home-index-footer-row">
          <h6 class="home-index-email-link-wrapper"><a href="/">contact@public-comics.com</a></h6>
          <span class="pipe">|</span>
          <h6 class="home-index-twitter-link-wrapper"><a href="/">twitter.com/public-comics</a></h6>
      </div>
  </footer>
</div>

<%# TODO: Modularize this %>
<script type="text/javascript">
    function initializeSlickCarousel(){
        $('.home-index-carousel-wrapper').slick({
          fade: true,
          cssEase: 'linear',
          arrows: false,
          dots: true
        });
    }
    function addIdentifyingClassesToSlickDots(slickDots){
        $.each(slickDots, function(index, buttonTag){
            var dotNum = index + 1
            $(buttonTag).addClass('slick-dot-' + dotNum)
        });
    }
    $(document).ready(function(){
        initializeSlickCarousel();
        var waitForSlickDots = setInterval(function(){
            var slickDots = $("ul.slick-dots").find("button");
            if (slickDots.length === 5) {
                addIdentifyingClassesToSlickDots(slickDots);
                clearInterval(waitForSlickDots);
            }
        }, 100)
    });
</script>



<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/react.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.13.3/JSXTransformer.js"></script>

<div id="content"></div>

<script type="text/jsx">
  var CommentBox = React.createClass({
    loadCommentsFromServer: function() {
      $.ajax({
        url: this.props.url,
        dataType: 'json',
        cache: false,
        success: function(data) {
          this.setState({data: data});
        }.bind(this),
        error: function(xhr, status, err) {
          console.error(this.props.url, status, err.toString());
        }.bind(this)
      });
    },
    getInitialState: function() {
      return {data: []};
    },
    render: function() {
      return (
        <div className="commentBox">
          <h1>Comments</h1>
          <CommentList data={this.state.data} />
          <CommentForm />
        </div>
      );
    },
    componentDidMount: function() {
      this.loadCommentsFromServer();
      setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    }
  });

  var CommentList = React.createClass({
    render: function() {
      var commentNodes = this.props.data.map(function (comment) {
        return (
          <Comment author={comment.author}>
            {comment.text}
          </Comment>
        );
      });
      return (
        <div className="commentList">
          {commentNodes}
        </div>
      );
    }
  });

  var CommentForm = React.createClass({
    render: function() {
      return (
        <div className="commentForm">
          Hello, world! I am a CommentForm.
        </div>
      );
    }
  });

  var Comment = React.createClass({
    render: function() {
      var rawMarkup = marked(this.props.children.toString(), {sanitize: true});
      return (
        <div className="comment">
          <h2 className="commentAuthor">
            {this.props.author}
          </h2>
          <span dangerouslySetInnerHTML={{__html: rawMarkup}} />
        </div>
      );
    }
  });

  React.render(
    <CommentBox url="/api/comments" pollInterval={2000} />,
    document.getElementById('content')
  );
</script>
